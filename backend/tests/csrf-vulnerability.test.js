const request = require('supertest');

describe('CSRF Vulnerability Demonstration', () => {
  let app;
  let server;

  beforeAll(async () => {
    app = require('../backend/server');
    server = app.listen(3002);
  });

  afterAll(async () => {
    if (server) {
      server.close();
    }
  });

  describe('CSRF Attack Simulation', () => {
    
    test('🚨 ATTACK: Malicious site attempting CSRF attack', async () => {
      // Simulate a malicious site trying to submit a form
      const maliciousPayload = {
        caseType: 'Malicious Attack',
        caseTitle: 'CSRF Attack Attempt',
        location: 'Evil Site',
        incidentDescription: 'This is a CSRF attack!'
      };

      const response = await request(app)
        .post('/api/caseFiles/create')
        .set('Origin', 'https://evil-site.com')
        .set('Referer', 'https://evil-site.com/malicious-form.html')
        .send(maliciousPayload);

      // Should be blocked due to CSRF protection
      expect(response.status).toBe(403);
      expect(response.body.error).toBe('Invalid CSRF token');
      console.log('🛡️ CSRF Attack Blocked: Status', response.status);
    });

    test('🚨 ATTACK: Cross-site request without proper token', async () => {
      // Simulate browser making request from different origin
      const response = await request(app)
        .post('/api/vehiclemaintain/createmainform')
        .set('Origin', 'https://attacker.com')
        .send({
          vehicleRegister: 'ABC-123',
          vrissue: 'Malicious maintenance request',
          vrcost: '999999'
        });

      expect(response.status).toBe(403);
      console.log('🛡️ Cross-site request blocked');
    });

    test('🚨 ATTACK: Session hijacking attempt', async () => {
      // Try to use someone else's session
      const response = await request(app)
        .post('/api/hire/add')
        .set('Cookie', 'jwt=stolen-session-token')
        .send({
          startDate: '2024-01-01',
          endDate: '2024-01-02',
          vehicleType: 'Car'
        });

      expect(response.status).toBe(403);
      console.log('🛡️ Session hijacking attempt blocked');
    });

    test('✅ DEFENSE: Valid request with proper CSRF token', async () => {
      // First get a valid CSRF token
      const loginResponse = await request(app)
        .post('/api/auth/login')
        .send({
          email: 'admin@example.com',
          password: 'password123'
        });

      if (loginResponse.status === 200) {
        const csrfCookie = loginResponse.headers['set-cookie']
          ?.find(cookie => cookie.startsWith('XSRF-TOKEN'));
        
        if (csrfCookie) {
          const csrfToken = csrfCookie.split('=')[1].split(';')[0];
          
          // Now make a valid request
          const response = await request(app)
            .post('/api/caseFiles/create')
            .set('X-CSRF-Token', csrfToken)
            .set('Cookie', csrfCookie)
            .send({
              caseType: 'Legitimate Request',
              caseTitle: 'Valid Case',
              location: 'Safe Location'
            });

          expect(response.status).toBe(200);
          console.log('✅ Valid request with CSRF token accepted');
        }
      }
    });
  });

  describe('CSRF Protection Coverage', () => {
    
    test('🛡️ All POST endpoints protected', async () => {
      const protectedEndpoints = [
        '/api/caseFiles/create',
        '/api/vehicle/',
        '/api/vehiclemaintain/createmainform',
        '/api/hire/add',
        '/api/income',
        '/api/expense',
        '/api/alert/create'
      ];

      for (const endpoint of protectedEndpoints) {
        const response = await request(app)
          .post(endpoint)
          .send({ test: 'data' });

        expect(response.status).toBe(403);
        console.log(`🛡️ ${endpoint} protected: ${response.status}`);
      }
    });

    test('🛡️ All PUT endpoints protected', async () => {
      const protectedEndpoints = [
        '/api/vehicle/123',
        '/api/hire/123',
        '/api/vehiclemaintain/123'
      ];

      for (const endpoint of protectedEndpoints) {
        const response = await request(app)
          .put(endpoint)
          .send({ test: 'data' });

        expect(response.status).toBe(403);
        console.log(`🛡️ ${endpoint} protected: ${response.status}`);
      }
    });

    test('🛡️ All DELETE endpoints protected', async () => {
      const protectedEndpoints = [
        '/api/hire/123',
        '/api/vehiclemaintain/123'
      ];

      for (const endpoint of protectedEndpoints) {
        const response = await request(app)
          .delete(endpoint)
          .send({ test: 'data' });

        expect(response.status).toBe(403);
        console.log(`🛡️ ${endpoint} protected: ${response.status}`);
      }
    });
  });
});
